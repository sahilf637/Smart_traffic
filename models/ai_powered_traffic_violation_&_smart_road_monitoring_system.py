# -*- coding: utf-8 -*-
"""AI-Powered Traffic Violation & Smart Road Monitoring System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JxugU7D_YsG-T1lChZhz6yp7lnsrli7x
"""

import zipfile
import os
import shutil
import random

pothole_zip = "/content/Pothole.Dataset.IVCNZ.zip"
violation_zip = "/content/Traffic-Violation-Detection.v4i.yolov8.zip"

pothole_extract_path = "/content/pothole_dataset"
violation_extract_path = "/content/traffic_violation_dataset"

# Extract Pothole Dataset
with zipfile.ZipFile(pothole_zip, 'r') as zip_ref:
    zip_ref.extractall(pothole_extract_path)

# Extract Traffic Violation Dataset
with zipfile.ZipFile(violation_zip, 'r') as zip_ref:
    zip_ref.extractall(violation_extract_path)

print("Datasets extracted successfully!")

print("Pothole Dataset Files:", os.listdir(pothole_extract_path))
print("Traffic Violation Dataset Files:", os.listdir(violation_extract_path))

pothole_dataset_path = "/content/pothole_dataset/Pothole Dataset"

print("Contents of Pothole Dataset:", os.listdir(pothole_dataset_path))

base_path = "/content/pothole_dataset/Pothole Dataset"
dataset_path = "/content/pothole_yolo"

train_img_path = f"{dataset_path}/train/images"
train_lbl_path = f"{dataset_path}/train/labels"
valid_img_path = f"{dataset_path}/valid/images"
valid_lbl_path = f"{dataset_path}/valid/labels"
test_img_path = f"{dataset_path}/test/images"
test_lbl_path = f"{dataset_path}/test/labels"

# Create directories
for path in [train_img_path, train_lbl_path, valid_img_path, valid_lbl_path, test_img_path, test_lbl_path]:
    os.makedirs(path, exist_ok=True)

# Get all images and corresponding label files
all_images = [f for f in os.listdir(base_path) if f.endswith(".jpg")]
all_labels = [f.replace(".jpg", ".txt") for f in all_images]

# Shuffle and split dataset (80% Train, 10% Valid, 10% Test)
random.seed(42)
data = list(zip(all_images, all_labels))
random.shuffle(data)

train_split = int(0.8 * len(data))
valid_split = int(0.9 * len(data))

train_data = data[:train_split]
valid_data = data[train_split:valid_split]
test_data = data[valid_split:]

# Move files to respective folders
def move_files(data_split, img_folder, lbl_folder):
    for img, lbl in data_split:
        shutil.move(os.path.join(base_path, img), os.path.join(img_folder, img))
        shutil.move(os.path.join(base_path, lbl), os.path.join(lbl_folder, lbl))

move_files(train_data, train_img_path, train_lbl_path)
move_files(valid_data, valid_img_path, valid_lbl_path)
move_files(test_data, test_img_path, test_lbl_path)

print(" Pothole dataset structured successfully!")

print("Train Images:", len(os.listdir(train_img_path)))
print("Train Labels:", len(os.listdir(train_lbl_path)))
print("Valid Images:", len(os.listdir(valid_img_path)))
print("Valid Labels:", len(os.listdir(valid_lbl_path)))
print("Test Images:", len(os.listdir(test_img_path)))
print("Test Labels:", len(os.listdir(test_lbl_path)))

yaml_content = f"""
train: {dataset_path}/train
val: {dataset_path}/valid
test: {dataset_path}/test

nc: 1  # Number of classes (Potholes)
names: ['pothole']
"""

with open(f"{dataset_path}/data.yaml", "w") as f:
    f.write(yaml_content)

print("data.yaml file created successfully!")

PROJECT_DIR = "/content/drive/MyDrive/pothole/YOLOv8m_Training"
os.makedirs(PROJECT_DIR, exist_ok=True)

print("Google Drive Mounted! Project Directory:", PROJECT_DIR)

!pip install ultralytics

!yolo detect train \
    model=yolov8m.pt \
    data=/content/pothole_yolo/data.yaml \
    epochs=100 \
    imgsz=640 \
    batch=16 \
    device=0 \
    optimizer=AdamW \
    patience=10 \
    save_period=10 \
    project=/content/drive/MyDrive/pothole/YOLOv8m_Training/runs \
    name=yolov8m_training \
    amp=True \
    augment=True

!yolo detect predict \
    model=/content/drive/MyDrive/pothole/YOLOv8m_Training/runs/yolov8m_training/weights/best.pt \
    source=/content/pothole_yolo/test/images \
    imgsz=640 \
    conf=0.5 \
    save=True

!yolo detect val \
    model=/content/drive/MyDrive/pothole/YOLOv8m_Training/runs/yolov8m_training/weights/best.pt \
    data=/content/pothole_yolo/data.yaml \
    imgsz=640 \
    conf=0.5

import matplotlib.pyplot as plt
import cv2
import random
import os

# Path to test images & labels
test_images_path = "/content/pothole_yolo/test/images"
test_labels_path = "/content/pothole_yolo/test/labels"

# Select a random image
random_image = random.choice(os.listdir(test_images_path))
img_path = os.path.join(test_images_path, random_image)
label_path = os.path.join(test_labels_path, random_image.replace(".jpg", ".txt"))

# Read image
img = cv2.imread(img_path)
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

# Read label file
with open(label_path, "r") as f:
    labels = f.readlines()

# Draw bounding boxes
for label in labels:
    label_data = label.strip().split()
    class_id, x, y, w, h = map(float, label_data)
    img_h, img_w, _ = img.shape
    x1, y1, x2, y2 = int((x - w / 2) * img_w), int((y - h / 2) * img_h), int((x + w / 2) * img_w), int((y + h / 2) * img_h)
    cv2.rectangle(img, (x1, y1), (x2, y2), (0, 255, 0), 2)

# Show Image with Ground Truth
plt.figure(figsize=(8, 6))
plt.imshow(img)
plt.axis("off")
plt.title("Ground Truth (Labeled Data)")
plt.show()

import glob
from PIL import Image
import IPython.display as display

# Path to predicted images
predicted_images_path = "/content/runs/detect/predict/"

# Show first 5 predicted images
image_paths = glob.glob(predicted_images_path + "*.jpg")

for img_path in image_paths[:5]:
    display.display(Image.open(img_path))

import numpy as np

def compute_iou(box1, box2):
    """Compute Intersection over Union (IoU) between two bounding boxes"""
    x1, y1, x2, y2 = box1
    x1g, y1g, x2g, y2g = box2

    xi1 = max(x1, x1g)
    yi1 = max(y1, y1g)
    xi2 = min(x2, x2g)
    yi2 = min(y2, y2g)

    inter_width = max(0, xi2 - xi1)
    inter_height = max(0, yi2 - yi1)
    intersection = inter_width * inter_height

    box1_area = (x2 - x1) * (y2 - y1)
    box2_area = (x2g - x1g) * (y2g - y1g)
    union = box1_area + box2_area - intersection

    iou = intersection / union if union != 0 else 0
    return iou

# Example Bounding Boxes (predicted vs ground truth)
pred_box = [50, 50, 150, 150]  # x1, y1, x2, y2 (Predicted)
gt_box = [60, 60, 140, 140]  # x1, y1, x2, y2 (Ground Truth)

iou_score = compute_iou(pred_box, gt_box)
print(f"IoU Score: {iou_score:.2f}")

!yolo detect val \
    model=/content/drive/MyDrive/pothole/YOLOv8m_Training/runs/yolov8m_training/weights/best.pt \
    data=/content/pothole_yolo/data.yaml

import pandas as pd

# Path to results file
results_path = "/content/drive/MyDrive/pothole/YOLOv8m_Training/runs/yolov8m_training/results.csv"

# Load and display results
df = pd.read_csv(results_path)
df

import matplotlib.pyplot as plt
import cv2

# Load mAP, Precision, and Recall plots
metrics_folder = "/content/drive/MyDrive/pothole/YOLOv8m_Training/runs/yolov8m_training/"
map50_plot = cv2.imread(metrics_folder + "PR_curve.png")
conf_plot = cv2.imread(metrics_folder + "confusion_matrix.png")

# Display Precision-Recall Curve
plt.figure(figsize=(10, 5))
plt.imshow(map50_plot)
plt.axis("off")
plt.title("Precision-Recall Curve")
plt.show()

# Display Confusion Matrix
plt.figure(figsize=(10, 5))
plt.imshow(conf_plot)
plt.axis("off")
plt.title("Confusion Matrix")
plt.show()

with open("/content/traffic_violation_dataset/data.yaml", "r") as f:
    print(f.read())

yaml_path = "/content/traffic_violation_dataset/data.yaml"

# Read and modify the YAML file
with open(yaml_path, "r") as file:
    yaml_content = file.read()

# Replace incorrect paths with absolute paths
yaml_content = yaml_content.replace("../train/images", "/content/traffic_violation_dataset/train/images")
yaml_content = yaml_content.replace("../valid/images", "/content/traffic_violation_dataset/valid/images")
yaml_content = yaml_content.replace("../test/images", "/content/traffic_violation_dataset/test/images")

# Save the updated YAML file
with open(yaml_path, "w") as file:
    file.write(yaml_content)

print("Updated `data.yaml` with correct paths!")

# Print updated data.yaml
with open(yaml_path, "r") as file:
    print(file.read())

# Paths to images and labels
train_img_path = "/content/traffic_violation_dataset/train/images"
train_lbl_path = "/content/traffic_violation_dataset/train/labels"
valid_img_path = "/content/traffic_violation_dataset/valid/images"
valid_lbl_path = "/content/traffic_violation_dataset/valid/labels"
test_img_path = "/content/traffic_violation_dataset/test/images"
test_lbl_path = "/content/traffic_violation_dataset/test/labels"

# Check if folders exist
print("Train Images:", len(os.listdir(train_img_path)))
print("Train Labels:", len(os.listdir(train_lbl_path)))
print("Valid Images:", len(os.listdir(valid_img_path)))
print("Valid Labels:", len(os.listdir(valid_lbl_path)))
print("Test Images:", len(os.listdir(test_img_path)))
print("Test Labels:", len(os.listdir(test_lbl_path)))

import random
import cv2
import matplotlib.pyplot as plt

# Select a random image from the train set
random_image = random.choice(os.listdir(train_img_path))
img_path = os.path.join(train_img_path, random_image)
label_path = os.path.join(train_lbl_path, random_image.replace(".jpg", ".txt"))

# Read the image
img = cv2.imread(img_path)
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

# Read label file
with open(label_path, "r") as f:
    labels = f.readlines()

# Get image dimensions
img_h, img_w, _ = img.shape

# Draw bounding boxes
for label in labels:
    label_data = label.strip().split()
    class_id, x, y, w, h = map(float, label_data)
    x1, y1, x2, y2 = int((x - w / 2) * img_w), int((y - h / 2) * img_h), int((x + w / 2) * img_w), int((y + h / 2) * img_h)
    cv2.rectangle(img, (x1, y1), (x2, y2), (0, 255, 0), 2)  # Green box

# Show image with bounding boxes
plt.figure(figsize=(8, 6))
plt.imshow(img)
plt.axis("off")
plt.title("Sample Training Image with Annotations")
plt.show()

PROJECT_DIR_2 = "/content/drive/MyDrive/traffic_violation/YOLOv8m_Training"
os.makedirs(PROJECT_DIR_2, exist_ok=True)

print("Google Drive Mounted! Project Directory:", PROJECT_DIR_2)

!yolo detect train \
    model=yolov8m.pt \
    data=/content/traffic_violation_dataset/data.yaml \
    epochs=100 \
    imgsz=640 \
    batch=16 \
    device=0 \
    optimizer=AdamW \
    patience=10 \
    save_period=10 \
    project=/content/drive/MyDrive/traffic_violation/YOLOv8m_Training/runs \
    name=yolov8m_traffic_training \
    amp=True \
    augment=True

!yolo detect train \
    model=/content/drive/MyDrive/traffic_violation/YOLOv8m_Training/runs/yolov8m_traffic_training/weights/last.pt \
    data=/content/traffic_violation_dataset/data.yaml \
    epochs=100 \
    imgsz=640 \
    batch=16 \
    device=0 \
    optimizer=AdamW \
    patience=10 \
    save_period=10 \
    project=/content/drive/MyDrive/traffic_violation/YOLOv8m_Training/runs \
    name=yolov8m_traffic_training \
    amp=True \
    augment=True \
    resume=True

!pip install flask flask-cors ultralytics opencv-python

